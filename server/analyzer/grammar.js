/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,7],$V2=[9,15],$V3=[5,9],$V4=[1,29],$V5=[1,20],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[10,13,18,31,32,33,34,35],$Vc=[1,35],$Vd=[16,26,28],$Ve=[2,26],$Vf=[1,44],$Vg=[1,51],$Vh=[1,43],$Vi=[1,42],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[2,10,13,18,19,31,32,33,34,35,45,46,47,49,51,55,57,58,59,60,64,71,84,85,86,87,88,89,90],$Vq=[1,76],$Vr=[1,77],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[16,20,26,56,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83],$VH=[1,80],$VI=[1,83],$VJ=[1,85],$VK=[20,26],$VL=[1,124],$VM=[1,119],$VN=[1,120],$VO=[1,121],$VP=[1,125],$VQ=[1,126],$VR=[1,128],$VS=[1,129],$VT=[1,127],$VU=[1,130],$VV=[16,20,26,56,70,71,76,77,78,79,80,81,82,83],$VW=[16,20,26,56,70,71,72,73,76,77,78,79,80,81,82,83],$VX=[16,20,26,56,76,77,82,83],$VY=[16,20,26,56,76,77,78,79,80,81,82,83],$VZ=[2,10,13,18,31,32,33,34,35,45,46,47,49,50,51,55,57,58,59,60,64],$V_=[10,13,31,32,33,34,35,45,46,47,49,51,55,57,58,59,60,64],$V$=[1,139],$V01=[2,10,13,31,32,33,34,35,45,46,47,49,51,55,57,58,59,60,64],$V11=[1,184],$V21=[1,185],$V31=[1,187],$V41=[13,55,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INITIAL":3,"CLASS_DEFINITION":4,"EOF":5,"IMPORT_LIST":6,"CLASS_LIST":7,"CLASS":8,"R_CLASS":9,"ID":10,"{":11,"CLASS_INSTRUCTIONS":12,"}":13,"IMPORT":14,"R_IMPORT":15,";":16,"CLASS_INSTRUCTION":17,"R_VOID":18,"(":19,")":20,"BLOCK_INSTRUCTIONS":21,"PARAMETERS_LIST":22,"TYPE":23,"DECLARATION":24,"ASSIGNATION":25,",":26,"PARAMETER":27,"=":28,"EXPRESSION":29,"ID_LIST":30,"R_INT":31,"R_DOUBLE":32,"R_STRING":33,"R_BOOLEAN":34,"R_CHAR":35,"INSTRUCTIONS":36,"INSTRUCTION":37,"ERROR_INSTRUCTIONS":38,"IF":39,"SWITCH":40,"FOR":41,"WHILE":42,"DO":43,"PRINT":44,"R_CONTINUE":45,"R_BREAK":46,"R_RETURN":47,"FUNCTION_CALL":48,"R_IF":49,"R_ELSE":50,"R_SWITCH":51,"CASE_LIST":52,"DEFAULT":53,"CASE":54,"R_DEFAULT":55,":":56,"R_CASE":57,"R_WHILE":58,"R_DO":59,"R_FOR":60,"INC_DEC":61,"++":62,"--":63,"R_SYSTEM":64,".":65,"R_OUT":66,"R_PRINT":67,"R_PRINTLN":68,"EXPRESSION_LIST":69,"+":70,"-":71,"*":72,"/":73,"^":74,"%":75,"==":76,"!=":77,">":78,">=":79,"<=":80,"<":81,"&&":82,"||":83,"!":84,"NUMBER":85,"DECIMAL":86,"STRING":87,"CHAR":88,"R_TRUE":89,"R_FALSE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"R_CLASS",10:"ID",11:"{",13:"}",15:"R_IMPORT",16:";",18:"R_VOID",19:"(",20:")",26:",",28:"=",31:"R_INT",32:"R_DOUBLE",33:"R_STRING",34:"R_BOOLEAN",35:"R_CHAR",45:"R_CONTINUE",46:"R_BREAK",47:"R_RETURN",49:"R_IF",50:"R_ELSE",51:"R_SWITCH",55:"R_DEFAULT",56:":",57:"R_CASE",58:"R_WHILE",59:"R_DO",60:"R_FOR",62:"++",63:"--",64:"R_SYSTEM",65:".",66:"R_OUT",67:"R_PRINT",68:"R_PRINTLN",70:"+",71:"-",72:"*",73:"/",74:"^",75:"%",76:"==",77:"!=",78:">",79:">=",80:"<=",81:"<",82:"&&",83:"||",84:"!",85:"NUMBER",86:"DECIMAL",87:"STRING",88:"CHAR",89:"R_TRUE",90:"R_FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[8,5],[8,4],[6,2],[6,1],[14,3],[12,2],[12,1],[17,5],[17,6],[17,5],[17,6],[17,1],[17,1],[22,3],[22,1],[27,2],[25,4],[24,3],[24,5],[30,3],[30,1],[23,1],[23,1],[23,1],[23,1],[23,1],[21,3],[21,2],[36,2],[36,1],[36,4],[36,3],[38,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[37,2],[37,2],[37,3],[37,2],[39,5],[39,7],[39,7],[40,6],[40,7],[52,2],[52,2],[52,1],[52,1],[53,3],[54,4],[42,5],[43,7],[41,8],[41,8],[61,2],[61,2],[44,9],[44,9],[48,3],[48,4],[69,3],[69,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,2],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = API.newClassDefinition($$[$0-1], $$[$0]); 
break;
case 3: case 17: case 18: case 27: case 28: case 29: case 30: case 31: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 101:
 this.$ = $$[$0]; 
break;
case 4: case 8: case 11: case 34: case 57: case 58:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 9: case 12: case 20: case 26: case 35: case 59: case 60: case 74:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = API.newClass($$[$0-3], $$[$0-1]); 
break;
case 7:
 this.$ = API.newClass($$[$0-2], []); 
break;
case 10:
 this.$ = API.newImport($$[$0-1]); 
break;
case 13:
 this.$ = API.newVoid($$[$0-3], $$[$0]); 
break;
case 14:
 this.$ = API.newVoidParams($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 15:
 this.$ = API.newMethod($$[$0-4], $$[$0-3], $$[$0]); 
break;
case 16:
 this.$ = API.newMethodParams($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 19: case 25: case 73:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 21:
 this.$ = API.newParam($$[$0-1], $$[$0]); 
break;
case 22:
 this.$ = API.newAssignation($$[$0-3], $$[$0-1]); 
break;
case 23:
 this.$ = API.newDeclaration($$[$0-2], $$[$0-1]); 
break;
case 24:
 this.$ = API.newDeclarationExp($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 32: case 51: case 100:
 this.$ = $$[$0-1]; 
break;
case 33:
 this.$ = []; 
break;
case 36:
 $$[$0-3].push($$[$0-2]); this.$ = $$[$0-3]; 
break;
case 37:
 this.$ = [$$[$0-2]]; 
break;
case 38:

        if($$[$0]!=';' && !panic){
			let row = this._$.first_line;
			let column = this._$.first_column + 1;
			let newError = "<td><center>" + count.toString() + "</center></td>\n" +
                "<td><center>Sintáctico</center></td>\n" +
                "<td><center>" + row + "</center></td>\n" +
                "<td><center>" + column + "</center></td>\n" +
                "<td><center>Se esperaba el inicio de una instrucción valida pero se obtuvo \"" + $$[$0] + "\" </center></td>\n" +
                "</tr>\n" +
                "</center>\n";
			count+=1;
			errors.push(newError);
			console.log('Este es un error sintactico: ' + $$[$0] + '. En la linea: '+ this._$.first_line + ', columna: '+this._$.first_column);
			panic = true;
        }
		else if($$[$0]==';'){
			panic = false;
		}
	
break;
case 47:
 this.$ = API.newContinue(this._$.first_line, this._$.first_column+1); 
break;
case 48:
 this.$ = API.newBreak(this._$.first_line, this._$.first_column+1); 
break;
case 49:
 this.$ = API.newReturn(null, this._$.first_line, this._$.first_column+1);
break;
case 50:
 this.$ = API.newReturn($$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 52:
 this.$ = API.newIf($$[$0-2], $$[$0], []); 
break;
case 53:
 this.$ = API.newIf($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = API.newIf($$[$0-4], $$[$0-2], [$$[$0]]); 
break;
case 55:
 this.$ = API.newSwitch($$[$0-3], []); 
break;
case 56:
 this.$ = API.newSwitch($$[$0-4], $$[$0-1]); 
break;
case 61:
 this.$ = API.newDefaultCase($$[$0]); 
break;
case 62:
 this.$ = API.newCase($$[$0-2], $$[$0]); 
break;
case 63:
 this.$ = API.newWhile($$[$0-2], $$[$0]); 
break;
case 64:
 this.$ = API.newDoWhile($$[$0-5], $$[$0-2]); 
break;
case 65: case 66:
 this.$ = API.newFor($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 67: case 89:
 this.$ = API.newUnitOperation($$[$0-1], OPERATION_TYPE.INCREMENT); 
break;
case 68: case 90:
 this.$ = API.newUnitOperation($$[$0-1], OPERATION_TYPE.DECREMENT); 
break;
case 69:
 this.$ = API.newPrint($$[$0-2]); 
break;
case 70:
 this.$ = API.newPrintLine($$[$0-2]); 
break;
case 71:
 this.$ = API.newFunctionCall($$[$0-2], []); 
break;
case 72:
 this.$ = API.newFunctionCall($$[$0-3], $$[$0-1]); 
break;
case 75:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.SUM); 
break;
case 76:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.SUBSTR); 
break;
case 77:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.MULTIP);
break;
case 78:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.DIVISION);
break;
case 79:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.POWER); 
break;
case 80:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.MODULE); 
break;
case 81:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.EQUALITY); 
break;
case 82:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.DISTINCT); 
break;
case 83:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.GREATER_THAN); 
break;
case 84:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.GREATER_EQUAL); 
break;
case 85:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.LESS_EQUAL); 
break;
case 86:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.LESS_THAN); 
break;
case 87:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.AND); 
break;
case 88:
 this.$ = API.newBinOperation($$[$0-2], $$[$0], OPERATION_TYPE.OR); 
break;
case 91:
 this.$ = API.newUnitOperation($$[$0], OPERATION_TYPE.NOT); 
break;
case 92:
 this.$ = API.newUnitOperation($$[$0], OPERATION_TYPE.NEGATIVE); 
break;
case 93:
 this.$ = API.newValue($$[$0], VALUE_TYPE.ID); 
break;
case 94:
 this.$ = API.newValue($$[$0], VALUE_TYPE.NUMBER); 
break;
case 95:
 this.$ = API.newValue($$[$0], VALUE_TYPE.DECIMAL); 
break;
case 96:
 this.$ = API.newValue($$[$0], VALUE_TYPE.STRING); 
break;
case 97:
 this.$ = API.newValue($$[$0], VALUE_TYPE.CHAR); 
break;
case 98:
 this.$ = API.newValue($$[$0], VALUE_TYPE.TRUE); 
break;
case 99:
 this.$ = API.newValue($$[$0], VALUE_TYPE.FALSE); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:6,9:$V0,14:5,15:$V1},{1:[3]},{5:[1,9]},{7:10,8:6,9:$V0,14:11,15:$V1},{5:[2,3],8:12,9:$V0},o($V2,[2,9]),o($V3,[2,5]),{10:[1,13]},{10:[1,14]},{1:[2,1]},{5:[2,2],8:12,9:$V0},o($V2,[2,8]),o($V3,[2,4]),{16:[1,15]},{11:[1,16]},o($V2,[2,10]),{10:$V4,12:17,13:[1,18],17:19,18:$V5,23:21,24:22,25:23,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},{10:$V4,13:[1,30],17:31,18:$V5,23:21,24:22,25:23,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},o($V3,[2,7]),o($Vb,[2,12]),{10:[1,32]},{10:[1,33],30:34},o($Vb,[2,17]),o($Vb,[2,18]),{10:[2,27]},{10:[2,28]},{10:[2,29]},{10:[2,30]},{10:[2,31]},{28:$Vc},o($V3,[2,6]),o($Vb,[2,11]),{19:[1,36]},o($Vd,$Ve,{19:[1,37]}),{16:[1,38],26:[1,40],28:[1,39]},{10:$Vf,19:$Vg,29:41,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{20:[1,53],22:54,23:56,27:55,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},{20:[1,57],22:58,23:56,27:55,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},o($Vp,[2,23]),{10:$Vf,19:$Vg,29:59,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:[1,60]},{16:[1,61],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},{10:$Vf,19:$Vg,29:78,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:79,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},o($VG,[2,93],{19:$VH}),o($VG,[2,94]),o($VG,[2,95]),o($VG,[2,96]),o($VG,[2,97]),o($VG,[2,98]),o($VG,[2,99]),{10:$Vf,19:$Vg,29:81,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},o($VG,[2,101]),{11:$VI,21:82},{20:[1,84],26:$VJ},o($VK,[2,20]),{10:[1,86]},{11:$VI,21:87},{20:[1,88],26:$VJ},{16:[1,89],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},o($Vd,[2,25]),o($Vp,[2,22]),{10:$Vf,19:$Vg,29:90,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:91,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:92,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:93,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:94,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:95,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:96,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:97,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:98,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:99,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:100,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:101,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:102,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:103,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},o($VG,[2,89]),o($VG,[2,90]),o($VG,[2,91]),o($VG,[2,92]),{10:$Vf,19:$Vg,20:[1,104],29:106,48:52,69:105,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{20:[1,107],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},o($Vb,[2,13]),{10:$VL,13:[1,109],23:123,24:111,25:112,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:108,37:110,39:113,40:114,41:115,42:116,43:117,44:118,45:$VM,46:$VN,47:$VO,48:122,49:$VP,51:$VQ,58:$VR,59:$VS,60:$VT,64:$VU},{11:$VI,21:131},{23:56,27:132,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},o($VK,[2,21]),o($Vb,[2,15]),{11:$VI,21:133},o($Vp,[2,24]),o($VV,[2,75],{62:$Vq,63:$Vr,72:$Vu,73:$Vv,74:$Vw,75:$Vx}),o($VV,[2,76],{62:$Vq,63:$Vr,72:$Vu,73:$Vv,74:$Vw,75:$Vx}),o($VW,[2,77],{62:$Vq,63:$Vr,74:$Vw,75:$Vx}),o($VW,[2,78],{62:$Vq,63:$Vr,74:$Vw,75:$Vx}),o([16,20,26,56,70,71,72,73,74,76,77,78,79,80,81,82,83],[2,79],{62:$Vq,63:$Vr,75:$Vx}),o([16,20,26,56,70,71,72,73,74,75,76,77,78,79,80,81,82,83],[2,80],{62:$Vq,63:$Vr}),o($VX,[2,81],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,78:$VA,79:$VB,80:$VC,81:$VD}),o($VX,[2,82],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,78:$VA,79:$VB,80:$VC,81:$VD}),o($VY,[2,83],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx}),o($VY,[2,84],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx}),o($VY,[2,85],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx}),o($VY,[2,86],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx}),o([16,20,26,56,82,83],[2,87],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o([16,20,26,56,83],[2,88],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE}),o($VG,[2,71]),{20:[1,134],26:[1,135]},o($VK,[2,74],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF}),o($VG,[2,100]),{10:$VL,13:[1,136],23:123,24:111,25:112,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,37:137,39:113,40:114,41:115,42:116,43:117,44:118,45:$VM,46:$VN,47:$VO,48:122,49:$VP,51:$VQ,58:$VR,59:$VS,60:$VT,64:$VU},o($VZ,[2,33]),o($V_,[2,35],{38:138,2:$V$}),o($V01,[2,39]),o($V01,[2,40]),o($V01,[2,41]),o($V01,[2,42]),o($V01,[2,43]),o($V01,[2,44]),o($V01,[2,45]),o($V01,[2,46]),{16:[1,140]},{16:[1,141]},{10:$Vf,16:[1,142],19:$Vg,29:143,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{16:[1,144]},{10:[1,145],30:34},{19:$VH,28:$Vc},{19:[1,146]},{19:[1,147]},{19:[1,148]},{19:[1,149]},{11:$VI,21:150},{65:[1,151]},o($Vb,[2,14]),o($VK,[2,19]),o($Vb,[2,16]),o($VG,[2,72]),{10:$Vf,19:$Vg,29:152,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},o($VZ,[2,32]),o($V_,[2,34],{38:153,2:$V$}),{16:[1,154]},{16:[2,38]},o($V01,[2,47]),o($V01,[2,48]),o($V01,[2,49]),{16:[1,155],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},o($V01,[2,51]),o($Vd,$Ve),{10:$Vf,19:$Vg,29:156,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:157,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$V4,23:123,24:158,25:159,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},{10:$Vf,19:$Vg,29:160,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{58:[1,161]},{66:[1,162]},o($VK,[2,73],{62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF}),{16:[1,163]},o($V_,[2,37]),o($V01,[2,50]),{20:[1,164],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},{20:[1,165],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},{10:$Vf,19:$Vg,29:166,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:167,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{20:[1,168],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},{19:[1,169]},{65:[1,170]},o($V_,[2,36]),{11:$VI,21:171},{11:[1,172]},{16:[1,173],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},{16:[1,174],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},{11:$VI,21:175},{10:$Vf,19:$Vg,29:176,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{67:[1,177],68:[1,178]},o($V01,[2,52],{50:[1,179]}),{13:[1,180],52:181,53:182,54:183,55:$V11,57:$V21},{10:$V31,61:186},{10:$V31,61:188},o($V01,[2,63]),{20:[1,189],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},{19:[1,190]},{19:[1,191]},{11:$VI,21:192,39:193,49:$VP},o($V01,[2,55]),{13:[1,194],53:195,54:196,55:$V11,57:$V21},o($V41,[2,59]),o($V41,[2,60]),{56:[1,197]},{10:$Vf,19:$Vg,29:198,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{20:[1,199]},{62:[1,200],63:[1,201]},{20:[1,202]},{16:[1,203]},{10:$Vf,19:$Vg,29:204,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},{10:$Vf,19:$Vg,29:205,48:52,71:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo},o($V01,[2,53]),o($V01,[2,54]),o($V01,[2,56]),o($V41,[2,57]),o($V41,[2,58]),{10:$VL,23:123,24:111,25:112,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:206,37:110,39:113,40:114,41:115,42:116,43:117,44:118,45:$VM,46:$VN,47:$VO,48:122,49:$VP,51:$VQ,58:$VR,59:$VS,60:$VT,64:$VU},{56:[1,207],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},{11:$VI,21:208},{20:[2,67]},{20:[2,68]},{11:$VI,21:209},o($V01,[2,64]),{20:[1,210],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},{20:[1,211],62:$Vq,63:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF},o($V41,[2,61],{24:111,25:112,39:113,40:114,41:115,42:116,43:117,44:118,48:122,23:123,37:137,10:$VL,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,45:$VM,46:$VN,47:$VO,49:$VP,51:$VQ,58:$VR,59:$VS,60:$VT,64:$VU}),{10:$VL,23:123,24:111,25:112,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:212,37:110,39:113,40:114,41:115,42:116,43:117,44:118,45:$VM,46:$VN,47:$VO,48:122,49:$VP,51:$VQ,58:$VR,59:$VS,60:$VT,64:$VU},o($V01,[2,65]),o($V01,[2,66]),{16:[1,213]},{16:[1,214]},o($V41,[2,62],{24:111,25:112,39:113,40:114,41:115,42:116,43:117,44:118,48:122,23:123,37:137,10:$VL,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,45:$VM,46:$VN,47:$VO,49:$VP,51:$VQ,58:$VR,59:$VS,60:$VT,64:$VU}),o($V01,[2,69]),o($V01,[2,70])],
defaultActions: {9:[2,1],24:[2,27],25:[2,28],26:[2,29],27:[2,30],28:[2,31],139:[2,38],200:[2,67],201:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
		//	Esto de aquí
        let row = hash.loc.first_line;
        let column = hash.loc.first_column + 1;
        let newError = "<td><center>" + count.toString() + "</center></td>\n" +
            "<td><center>Sintáctico</center></td>\n" +
            "<td><center>" + row + "</center></td>\n" +
            "<td><center>" + column + "</center></td>\n" +
            "<td><center>Se esperaba "+ hash.expected +" pero se obtuvo token " + hash.token + ": \"" + hash.text + "\" </center></td>\n" +
            "</tr>\n" +
            "</center>\n";
        count+=1;
        console.log(newError);
        errors.push(newError);	//	Hasta aquí
        throw error;
    }
},
parse: function parse (input) {
    errors.length = 0;	//	Y esto también
    count = 1;			//	al igual que esto
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let panic = false,
    count = 1,
    errors = new Array();
module.exports.errors = errors;

const OPERATION_TYPE = require('./instructions').OPERATION_TYPE;
const VALUE_TYPE = require('./instructions').VALUE_TYPE;
const API = require('./instructions').APIINSTRUCTIONS;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comment */
break;
case 1:/* skip comment */
break;
case 2:/* skip whitespaces */
break;
case 3:return  'R_INT';
break;
case 4:return  'R_DOUBLE';
break;
case 5:return  'R_CHAR';
break;
case 6:return  'R_BOOLEAN';
break;
case 7:return  'R_STRING';
break;
case 8:return  'R_CLASS';
break;
case 9:return  'R_IMPORT';
break;
case 10:return  'R_TRUE';
break;
case 11:return  'R_FALSE';
break;
case 12:return  'R_IF';
break;
case 13:return  'R_ELSE';
break;
case 14:return  'R_SWITCH';
break;
case 15:return  'R_CASE';
break;
case 16:return  'R_DEFAULT';
break;
case 17:return  'R_WHILE';
break;
case 18:return  'R_DO';
break;
case 19:return  'R_FOR';
break;
case 20:return  'R_BREAK';
break;
case 21:return  'R_CONTINUE';
break;
case 22:return  'R_RETURN';
break;
case 23:return  'R_VOID';
break;
case 24:return  'R_SYSTEM';
break;
case 25:return  'R_OUT';
break;
case 26:return  'R_PRINT';
break;
case 27:return  'R_PRINTLN';
break;
case 28:return  ';';
break;
case 29:return  ':';
break;
case 30:return  ',';
break;
case 31:return  '.';
break;
case 32:return  '{';
break;
case 33:return  '}';
break;
case 34:return  '(';
break;
case 35:return  ')';
break;
case 36:return  '*';
break;
case 37:return  '/';
break;
case 38:return  '^';
break;
case 39:return  '%';
break;
case 40:return  '++';
break;
case 41:return  '--';
break;
case 42:return  '==';
break;
case 43:return  '!=';
break;
case 44:return  '>=';
break;
case 45:return  '<=';
break;
case 46:return  '&&';
break;
case 47:return  '||';
break;
case 48:return  '>';
break;
case 49:return  '<';
break;
case 50:return  '!';
break;
case 51:return  '=';
break;
case 52:return  '+';
break;
case 53:return  '-';
break;
case 54:return  'DECIMAL';
break;
case 55:return  'NUMBER';
break;
case 56:return  'ID';
break;
case 57:return  'CHAR';
break;
case 58:return  'STRING';
break;
case 59:return  'EOF';
break;
case 60: 
	let row = yy_.yylloc.first_line;
	let column = yy_.yylloc.first_column + 1;
	let newError = "<td><center>" + count.toString() + "</center></td>\n" +
                "<td><center>Léxico</center></td>\n" +
                "<td><center>" + row + "</center></td>\n" +
                "<td><center>" + column + "</center></td>\n" +
                "<td><center>El caracter \"" + yy_.yytext + "\" no pertenece al lenguaje</center></td>\n" +
                "</tr>\n" +
                "</center>\n";
	count+=1;
	errors.push(newError);
	console.log('Error lexico: \'' + yy_.yytext + '\'. En fila: ' + row + ', columna: ' + column + '.');
	
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:\s+)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:(([0-9]+)(\.([0-9]+))))/,/^(?:([0-9]+))/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:((\.)))/,/^(?:(("[^"]*")))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}